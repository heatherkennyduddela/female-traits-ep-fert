# full kinship table with metadata
# from 01_paternity 2022 assignment with lcMLkin output
load("input-files/kin2_22.Rdata")
# libraries
library(tidyverse)
library(ggplot2)
# fertilization types summarized by clutch ID
# from 02_summarise total RS and fertilization types
shared.fert.clutch2 <- read.csv("input-files/fert_2022_by_clutchID.csv")
# libraries
library(tidyverse)
library(ggplot2)
# fertilization types summarized by clutch ID
# from 02_summarise total RS and fertilization types
shared.fert.clutch2 <- read.csv("input-files/fert_2022_by_clutchID.csv")
# full kinship table with metadata
# from 01_paternity 2022 assignment with lcMLkin output
load("input-files/kin2_22.Rdata")
# list of kids with unknown dads
# from 01_paternity 2022 assignment with lcMLkin output
load("input-files/kids_unk_dads_2022.Rdata")
# families for paternity table
# from "add clutch ID to family info.R" script
load("input-files/fam_clutch.RData")
fam.22 <- fam.clutch
# replace "-" in seqID with "_"
fam.22$Seq.ID.test <- gsub("-","_",fam.22$Seq.ID)
# feather color data
color <- read.csv("CO 2022_feather color_2023-07-14_complete_sorted.csv")
# feather color data
color <- read.csv("input-files/CO 2022_feather color_2023-07-14_complete_sorted.csv")
# count number of mates per male
mates.by.male <- shared.fert.clutch2 %>%
group_by(Band_dad, FamilyID_dad, site_size_dad) %>%
summarise(num.mates = length(unique(Band_mom)),
num.clutches = length(unique(clutch_id_ind2)),
num.chicks = sum(fert))
View(mates.by.male)
# calculate chicks per mate for males
mates.by.male$chicks.per.mate <- mates.by.male$num.chicks/mates.by.male$num.mates
View(mates.by.male)
# relationship between number of mates and total chicks for males
ggplot(subset(mates.by.male, !is.na(mates.by.male$Band_dad)),
aes(x=num.mates, y=num.chicks)) + geom_point(alpha=0.5) +
geom_smooth(method=lm) + xlab("Number of dams") + ylab("Total offspring") +
ggtitle("Multiple mating and male total RS")
# relationship between number of mates and total chicks for males
ggplot(subset(mates.by.male, !is.na(mates.by.male$Band_dad)),
aes(x=num.mates, y=num.chicks)) + geom_point(alpha=0.5) +
geom_smooth(method=lm) + xlab("Number of dams") + ylab("Total offspring") +
ggtitle("Multiple mating and male total RS 2022")
ggsave("generated-files/multiple mating and male RS 2022.png")
cor.test(mates.by.male$num.mates, mates.by.male$num.chicks, method="spearman")
# relationship between number of mates and total chicks for males
ggplot(subset(mates.by.male, !is.na(mates.by.male$Band_dad)),
aes(x=num.mates, y=num.chicks)) + geom_point(alpha=0.5) +
geom_smooth(method=lm) + xlab("Number of dams") + ylab("Total offspring") +
ggtitle("Multiple mating and male total RS 2022\nSpearman Rho=0.62, p<0.001")
ggsave("generated-files/multiple mating and male RS 2022.png")
# relationship between number of dams and site size for males
ggplot(subset(mates.by.male, !is.na(mates.by.male$Band_dad)),
aes(x=site_size_dad, y=num.mates)) + geom_point(alpha=0.5) +
geom_smooth(method=lm) + ylab("Number of dams") + xlab("site size") +
ggtitle("Multiple mating and site size for males")
cor.test(mates.by.male$num.mates, mates.by.male$site_size_dad, method="spearman")
# relationship between number of dams and site size for males
ggplot(subset(mates.by.male, !is.na(mates.by.male$Band_dad)),
aes(x=site_size_dad, y=num.mates)) + geom_point(alpha=0.5) +
geom_smooth(method=lm) + ylab("Number of dams") + xlab("site size") +
ggtitle("Multiple mating and site size for males 2022\nSpearman Rho=0.189, p=0.138")
ggsave("generated-files/site size and male RS 2022.png", w=4, h=4)
cor.test(mates.by.male$num.mates, mates.by.male$site_size_dad, method="spearman")
# chicks per mate and total chicks for males
ggplot(subset(mates.by.male, !is.na(mates.by.male$Band_dad)),
aes(x=chicks.per.mate, y=num.chicks)) + geom_point(alpha=0.5) +
geom_smooth(method=lm) + xlab("Chicks per mate") + ylab("Total offspring") +
ggtitle("Chicks per mate and male total RS")
# chicks per mate and site size for males
ggplot(subset(mates.by.male, !is.na(mates.by.male$Band_dad)),
aes(y=chicks.per.mate, x=site_size_dad)) + geom_point(alpha=0.5) +
geom_smooth(method=lm) + ylab("Chicks per mate") + xlab("site size") +
ggtitle("Chicks per mate and site size for males")
# take kids from the full kinship table that are in the unassigned dads table
dad.unk.sibs22 <- kin2.22[which(kin2.22$Ind2 %in% dad.unk22$Ind2),]
# filter to keep unassigned kids compared to unassigned kids
dad.unk.sibs22.2 <- dad.unk.sibs22[which(dad.unk.sibs22$Ind1 %in% dad.unk22$Ind2), ]
# filter to keep only pairs that are within the same family
# note that cases where only one kid within a family had an unknown dad are excluded
# from this table
dad.unk.sibs.fam22 <- subset(dad.unk.sibs22.2, dad.unk.sibs22.2$FamilyID_ind2 ==
dad.unk.sibs22.2$FamilyID_ind1)
View(dad.unk.sibs.fam22)
# unique kids that DO have siblings with unknown dads
kid.sib.list <- c(dad.unk.sibs.fam22$Ind1, dad.unk.sibs.fam22$Ind2)
View(dad.unk22)
View(dad.unk.sibs22.2)
# list of kids with unk dads that are in the sibs table
kid.sib.list <- c(dad.unk.sibs.fam22$Ind1, dad.unk.sibs.fam22$Ind2)
# all kids with unk dads (not just one with sibs)
kid.unk.list <- c(dad.unk.sibs22$Ind2)
# check which kids from the unk list are in the sibs list
kid.in.sib.list.index <- which(kid.unk.list %in% kid.sib.list)
# pull out kids from unk list that are NOT in the sibs list
kid.not.in.sib.list <- kid.unk.list[-kid.in.sib.list.index]
# find list of unique kids that are not in sibs list
# because it was only one kid in the clutch with an unknown dad
kid.not.in.sib.list.unique <- unique(kid.unk.list[-kid.in.sib.list.index])
kid.not.in.sib.list.unique
# object for number of families with unassigned kids
unk.fam22 <- as.data.frame(unique(dad.unk.sibs.fam22$FamilyID_ind1))
colnames(unk.fam22)[1] <- "FamilyID"
# add column to store number of dads
unk.fam22$num.dads <- NA
for (i in 1:length(unk.fam22$FamilyID)) {
# subset by family id
fam <- subset(dad.unk.sibs.fam22, dad.unk.sibs.fam22$FamilyID_ind1 == unk.fam22$FamilyID[i])
# get relatedness data
rel <- fam[,c(1,2,6)]
# use reshape to go from a pairwise list to a distance matrix
rel.r <- reshape(rel, direction="wide", idvar="Ind2", timevar="Ind1")
# remove first column which is just labels
rel.r.mat <- as.matrix(rel.r[,-1])
# give full sibs as 0
rel.r.bin <- rel.r.mat
rel.r.bin[rel.r.mat >= 0.239] <- 0 # cutoff value from range of relatedness from
# genetic full sibs in 2022
# give half sibs as 1
rel.r.bin[rel.r.mat < 0.239] <- 1
# calculate row products
row.prod <- apply(rel.r.bin, 1, prod, na.rm=T)
# sum up an add 1 to get the number of fathers
num.dad <- sum(row.prod) + 1
# save in storage
unk.fam22$num.dads[i] <- num.dad
}
View(unk.fam22)
kid.not.in.sib.list.unique <- as.data.frame(kid.not.in.sib.list.unique)
colnames(kid.not.in.sib.list.unique)[] <- "Seq.ID.test"
# add family ID
kid.not.in.sib.list.unique.fam <- left_join(kid.not.in.sib.list.unique,
fam.22[,c(8,23)], by="Seq.ID.test")
# add number of unk dads
kid.not.in.sib.list.unique.fam$num.dads <- 1
# combine two tables
unk.fam22.complete <- rbind(unk.fam22, kid.not.in.sib.list.unique.fam[,c(2:3)])
View(unk.fam22.complete)
# count number of mates per female
mates.by.fem <- shared.fert.clutch2 %>%
group_by(Band_mom, FamilyID_mom, site_size_mom) %>%
summarise(num.mates = length(unique(Band_dad)),
num.clutches = length(unique(clutch_id_ind2)),
num.chicks = sum(fert))
View(mates.by.fem)
mates.by.fem.complete <- mates.by.fem
for (i in 1:length(unk.fam22.complete$FamilyID)) {
fam.index <- unk.fam22.complete$FamilyID[i]
female.index <- which(mates.by.fem.complete$FamilyID_mom == fam.index)
mates.sum <- (mates.by.fem.complete$num.mates[female.index] + unk.fam22.complete$num.dads[i])
mates.by.fem.complete$num.mates[female.index] <- mates.sum
}
# calculate chicks per mate
mates.by.fem.complete$mates.per.chick <- mates.by.fem.complete$num.chicks/mates.by.fem.complete$num.mates
# number of mates vs. RS for females
ggplot(subset(mates.by.fem.complete, !is.na(mates.by.fem.complete$Band_mom)),
aes(x=num.mates, y=num.chicks)) + geom_point(alpha=0.5) +
geom_smooth(method=lm) + xlab("Number of sires") + ylab("Total offspring") +
ggtitle("Multiple mating and female total RS")
cor.test(mates.by.fem.complete$num.mates, mates.by.fem.complete$num.chicks, method="spearman")
# number of mates vs. RS for females
ggplot(subset(mates.by.fem.complete, !is.na(mates.by.fem.complete$Band_mom)),
aes(x=num.mates, y=num.chicks)) + geom_point(alpha=0.5) +
geom_smooth(method=lm) + xlab("Number of sires") + ylab("Total offspring") +
ggtitle("Multiple mating and female total RS\nSpearman Rho=0.368, p=0.004")
# number of mates vs. RS for females
ggplot(subset(mates.by.fem.complete, !is.na(mates.by.fem.complete$Band_mom)),
aes(x=num.mates, y=num.chicks)) + geom_point(alpha=0.5) +
geom_smooth(method=lm) + xlab("Number of sires") + ylab("Total offspring") +
ggtitle("Multiple mating and female total RS 2022\nSpearman Rho=0.368, p=0.004")
ggsave("generated-files/multiple mating and female RS 2022.png", w=4, h=4)
# number of mates vs. site size for females
ggplot(subset(mates.by.fem.complete, !is.na(mates.by.fem.complete$Band_mom)),
aes(y=num.mates, x=site_size_mom)) + geom_point(alpha=0.5) +
geom_smooth(method=lm) + xlab("Site size") + ylab("Number of sires") +
ggtitle("Multiple mating and site size for females")
View(unk.fam22.complete)
View(mates.by.fem.complete)
ggsave("generated-files/site size and female multiple mating 2022.png", w=4, h=4)
cor.test(mates.by.fem.complete$site_size_mom, mates.by.fem.complete$num.mates, method="spearman")
# number of mates vs. site size for females
ggplot(subset(mates.by.fem.complete, !is.na(mates.by.fem.complete$Band_mom)),
aes(y=num.mates, x=site_size_mom)) + geom_point(alpha=0.5) +
geom_smooth(method=lm) + xlab("Site size") + ylab("Number of sires") +
ggtitle("Multiple mating and site size for females 2022\nSpearman Rho=0.22, p=0.099")
ggsave("generated-files/site size and female multiple mating 2022.png", w=4, h=4)
# number of mates vs. site size for females - excluding CHR
ggplot(subset(mates.by.fem.complete, !is.na(mates.by.fem.complete$Band_mom) &
mates.by.fem.complete$site_size_mom < 32),
aes(y=num.mates, x=site_size_mom)) + geom_point(alpha=0.5) +
geom_smooth(method=lm) + xlab("Number of sires") + ylab("Total offspring") +
ggtitle("Multiple mating and site size for females")
# chicks per mate vs. total offspring for females
ggplot(subset(mates.by.fem.complete, !is.na(mates.by.fem.complete$Band_mom)),
aes(x=mates.per.chick, y=num.chicks)) + geom_point(alpha=0.5) +
geom_smooth(method=lm) + xlab("Chicks per mate") + ylab("Total offspring") +
ggtitle("Chicks per mate and female total RS")
ggplot(subset(mates.by.fem.complete, !is.na(mates.by.fem.complete$Band_mom)),
aes(x=mates.per.chick, y=num.chicks)) + geom_point(alpha=0.5) +
geom_smooth() + xlab("Chicks per mate") + ylab("Total offspring") +
ggtitle("Chicks per mate and female total RS")
ggplot(subset(mates.by.fem.complete, !is.na(mates.by.fem.complete$Band_mom)),
aes(x=mates.per.chick, y=num.chicks)) + geom_point(alpha=0.5) +
xlab("Chicks per mate") + ylab("Total offspring") +
ggtitle("Chicks per mate and female total RS")
ggsave("chicks per mate and total RS for females 2022.png", w=4, h=4)
# chicks per mate vs. site size for females
ggplot(subset(mates.by.fem.complete, !is.na(mates.by.fem.complete$Band_mom)),
aes(y=mates.per.chick, x=site_size_mom)) + geom_point(alpha=0.5) +
geom_smooth(method=lm) + ylab("Chicks per mate") + xlab("site size") +
ggtitle("Chicks per mate and site size for females")
View(shared.fert.clutch2)
# subset to keep only EP kids, to count number of EP mates
shared.fert.clutch.ep <- subset(shared.fert.clutch2,
shared.fert.clutch2$fert_type!="wp")
ep.mates.by.male <- shared.fert.clutch.ep %>%
group_by(Band_dad, FamilyID_dad, site_size_dad) %>%
summarise(num.ep.mates = length(unique(Band_mom)),
num.ep.clutches = length(unique(clutch_id_ind2)),
num.ep.chicks = sum(fert))
View(mates.by.male)
View(ep.mates.by.male)
ep.mates.by.fem <- shared.fert.clutch.ep %>%
group_by(Band_mom, FamilyID_mom, site_size_mom) %>%
summarise(num.ep.mates = length(unique(Band_dad)),
num.ep.clutches = length(unique(clutch_id_ind2)),
num.ep.chicks = sum(fert))
View(ep.mates.by.fem)
View(unk.fam22.complete)
mates.by.fem.complete <- mates.by.fem
for (i in 1:length(unk.fam22.complete$FamilyID)) {
fam.index <- unk.fam22.complete$FamilyID[i]
female.index <- which(mates.by.fem.complete$FamilyID_mom == fam.index)
mates.sum <- (mates.by.fem.complete$num.mates[female.index] + unk.fam22.complete$num.dads[i] -1)
mates.by.fem.complete$num.mates[female.index] <- mates.sum
}
View(mates.by.fem.complete)
View(ep.mates.by.fem)
# add in additional EP mates from unknown sires
# this time, just change the 2 families with multiple unknown
ep.mates.by.fem.complete <- ep.mates.by.fem
ep.mates.by.fem.complete$num.ep.mates[which(ep.mates.by.fem.complete$FamilyID_mom==
"CHR-074")] <- 3
ep.mates.by.fem.complete$num.ep.mates[which(ep.mates.by.fem.complete$FamilyID_mom==
"CHR-112")] <- 3
View(ep.mates.by.fem.complete)
View(ep.mates.by.male)
mates.by.male.all <- left_join(mates.by.male, ep.mates.by.male,
by=c("Band_dad","FamilyID_dad","site_size_dad"))
View(mates.by.male.all)
# for males that did not have any ep mates, fill in NAs with 0
mates.by.male.all$num.ep.mates[which(is.na(mates.by.male.all$num.ep.mates))]
# for males that did not have any ep mates, fill in NAs with 0
mates.by.male.all$num.ep.mates[which(is.na(mates.by.male.all$num.ep.mates))] <- 0
mates.by.male.all$num.ep.mates[which(is.na(mates.by.male.all$num.ep.clutches))] <- 0
mates.by.male.all$num.ep.mates[which(is.na(mates.by.male.all$num.ep.chicks))] <- 0
View(mates.by.male.all)
mates.by.male.all$num.ep.clutches[which(
is.na(mates.by.male.all$num.ep.clutches))] <- 0
mates.by.male.all$num.ep.chicks[which(is.na(mates.by.male.all$num.ep.chicks))] <- 0
# remove the NA row from unknown males
mates.by.male.all2 <- subset(mates.by.male.all,
!is.na(mates.by.male.all$Band_dad))
View(mates.by.male.all2)
# save table
write.csv(mates.by.male.all2,
"generated-files/male number of mates 2022.csv", row.names = F)
View(mates.by.male.all2)
colnames(mates.by.male.all2)[4:7]
# update column names
colnames(mates.by.male.all2)[4:7] <- c("num.tot.mates" ,"num.tot.clutches",
"num.tot.chicks", "tot.chicks.per.mate")
# save table
write.csv(mates.by.male.all2,
"generated-files/male number of mates 2022.csv", row.names = F)
mates.by.fem.all <- mates.by.fem.complete
mates.by.fem.all <-left_join(mates.by.fem.complete, ep.mates.by.fem.complete,
by=c("Band_mom", "FamilyID_mom", "site_size_mom"))
View(mates.by.fem.all)
# for females with no EP mates, fill in NAs with 0s
mates.by.fem.all$num.ep.mates[which(is.na(mates.by.fem.all$num.ep.mates))] <- 0
mates.by.fem.all$num.ep.clutches[which(
is.na(mates.by.fem.all$num.ep.clutches))] <- 0
mates.by.fem.all$num.ep.chicks[which(is.na(mates.by.fem.all$num.ep.chicks))] <- 0
View(mates.by.fem.all)
View(mates.by.fem.all)
# remove the NA row from unsampled females
mates.by.fem.all2 <- subset(mates.by.fem.all,
!is.na(mates.by.fem.all$Band_mom))
View(mates.by.fem.all2)
# update column names
colnames(mates.by.fem.all2)[4:6] <- c("num.tot.mates" ,"num.tot.clutches",
"num.tot.chicks")
View(mates.by.fem.all2)
# save table
write.csv(mates.by.fem.all2,
"generated-files/female number of mates 2022.csv", row.names=F)
# all mates
mates.by.male <- shared.fert.clutch2 %>%
group_by(Band_dad, FamilyID_dad, site_size_dad, clutch_id_ind2) %>%
summarise(num.mates = length(unique(Band_mom)),
num.clutches = length(unique(clutch_id_ind2)),
num.chicks = sum(fert))
# all mates
mates.by.male.clutch <- shared.fert.clutch2 %>%
group_by(Band_dad, FamilyID_dad, site_size_dad, clutch_id_ind2) %>%
summarise(num.mates = length(unique(Band_mom)),
num.clutches = length(unique(clutch_id_ind2)),
num.chicks = sum(fert))
View(mates.by.male.clutch)
# all mates
mates.by.male.clutch <- shared.fert.clutch2 %>%
group_by(Band_dad, FamilyID_dad, clutch_id_ind2, brood) %>%
summarise(num.mates = length(unique(Band_mom)),
num.clutches = length(unique(clutch_id_ind2)),
num.chicks = sum(fert))
View(mates.by.male.all2)
View(mates.by.male.clutch)
# all mates
mates.by.fem.clutch <- shared.fert.clutch2 %>%
group_by(Band_mom, FamilyID_mom, clutch_id_ind2, brood) %>%
summarise(num.mates = length(unique(Band_mom)),
num.chicks = sum(fert))
View(mates.by.fem.clutch)
# all mates
mates.by.fem.clutch <- shared.fert.clutch2 %>%
group_by(Band_mom, FamilyID_mom, clutch_id_ind2, brood) %>%
summarise(num.mates = length(unique(Band_dad)),
num.chicks = sum(fert))
View(mates.by.fem.clutch)
# all mates
mates.by.fem.clutch <- shared.fert.clutch2 %>%
group_by(Band_mom, FamilyID_mom, clutch_id_ind2, brood) %>%
summarise(num.tot.mates = length(unique(Band_dad)),
num.tot.chicks = sum(fert))
# just number of ep mates
# subset to keep only EP kids, to count number of EP mates
mates.by.fem.clutch.ep <- shared.fert.clutch.ep %>%
group_by(Band_mom, FamilyID_mom, clutch_id_ind2, brood) %>%
summarise(num.ep.mates = length(unique(Band_dad)),
num.ep.chicks = sum(fert))
View(mates.by.fem.clutch.ep)
# filter to keep only pairs that are within the same clutch
# note that cases where only one kid within a clutch had an unknown dad are excluded
# from this table
dad.unk.sibs.clutch <- subset(dad.unk.sibs22.2, dad.unk.sibs22.2$clutch_id_ind2 ==
dad.unk.sibs22.2$clutch_id_ind1)
View(dad.unk.sibs.clutch)
# list of kids with unk dads that are in the sibs table
kid.clutch.list <- c(dad.unk.sibs.clutch$Ind1, dad.unk.sibs.clutch$Ind2)
# check which kids from the unk list are in the sibs list
kid.in.sib.list.clutch.index <- which(kid.unk.list %in% kid.clutch.list)
# pull out kids from unk list that are NOT in the sibs list
kid.not.in.sib.clutch.list <- kid.unk.list[-kid.in.sib.list.clutch.index]
# find list of unique kids that are not in sibs list
# because it was only one kid in the clutch with an unknown dad
# 4 kids total
kid.not.in.sib.clutch.list.unique <- unique(kid.unk.list[-kid.in.sib.list.clutch.index])
kid.not.in.sib.clutch.list.unique
# object for number of clutches with unassigned kids
unk.clutch <- as.data.frame(unique(dad.unk.sibs.clutch$FamilyID_ind1))
View(unk.clutch)
View(dad.unk.sibs.clutch)
# object for number of clutches with unassigned kids
unk.clutch <- as.data.frame(unique(dad.unk.sibs.clutch$clutch_id_ind1))
View(unk.clutch)
View(unk.clutch)
colnames(unk.clutch)[1] <- "clutchID"
# add column to store number of dads
unk.clutch$num.dads <- NA
View(unk.clutch)
# subset by clutch id
fam <- subset(dad.unk.sibs.clutch, dad.unk.sibs.clutch$clutch_id_ind1 == unk.clutch$clutchID[i])
View(dad.unk.sibs.clutch)
unk.clutch$clutchID[i]
View(unk.clutch)
i=1
unk.clutch$clutchID[i]
# subset by clutch id
fam <- subset(dad.unk.sibs.clutch, dad.unk.sibs.clutch$clutch_id_ind1 == unk.clutch$clutchID[i])
View(fam)
# get relatedness data
rel <- fam[,c(1,2,6)]
View(rel)
# use reshape to go from a pairwise list to a distance matrix
rel.r <- reshape(rel, direction="wide", idvar="Ind2", timevar="Ind1")
# remove first column which is just labels
rel.r.mat <- as.matrix(rel.r[,-1])
# give full sibs as 0
rel.r.bin <- rel.r.mat
rel.r.bin[rel.r.mat >= 0.239] <- 0 # cutoff value from range of relatedness from
# give half sibs as 1
rel.r.bin[rel.r.mat < 0.239] <- 1
View(rel.r.bin)
# calculate row products
row.prod <- apply(rel.r.bin, 1, prod, na.rm=T)
# sum up an add 1 to get the number of fathers
num.dad <- sum(row.prod) + 1
# save in storage
unk.fam22$num.dads[i] <- num.dad
# save in storage
unk.clutch$num.dads[i] <- num.dad
View(unk.clutch)
# object for number of clutches with unassigned kids
unk.clutch <- as.data.frame(unique(dad.unk.sibs.clutch$clutch_id_ind1))
colnames(unk.clutch)[1] <- "clutchID"
# add column to store number of dads
unk.clutch$num.dads <- NA
for (i in 1:length(unk.clutch$clutchID)) {
# subset by clutch id
fam <- subset(dad.unk.sibs.clutch, dad.unk.sibs.clutch$clutch_id_ind1 == unk.clutch$clutchID[i])
# get relatedness data
rel <- fam[,c(1,2,6)]
# use reshape to go from a pairwise list to a distance matrix
rel.r <- reshape(rel, direction="wide", idvar="Ind2", timevar="Ind1")
# remove first column which is just labels
rel.r.mat <- as.matrix(rel.r[,-1])
# give full sibs as 0
rel.r.bin <- rel.r.mat
rel.r.bin[rel.r.mat >= 0.239] <- 0 # cutoff value from range of relatedness from
# genetic full sibs in 2022
# give half sibs as 1
rel.r.bin[rel.r.mat < 0.239] <- 1
# calculate row products
row.prod <- apply(rel.r.bin, 1, prod, na.rm=T)
# sum up an add 1 to get the number of fathers
num.dad <- sum(row.prod) + 1
# save in storage
unk.clutch$num.dads[i] <- num.dad
}
# combine total mates and just ep mates for the clutches
mates.by.fem.clutch.all <- left_join(mates.by.fem.clutch, mates.by.fem.clutch.ep,
by=c("Band_mom","FamilyID_mom",
"clutch_id_ind1", "brood"))
View(mates.by.fem.clutch.ep)
View(mates.by.fem.clutch)
# combine total mates and just ep mates for the clutches
mates.by.fem.clutch.all <- left_join(mates.by.fem.clutch, mates.by.fem.clutch.ep,
by=c("Band_mom","FamilyID_mom",
"clutch_id_ind2", "brood"))
View(mates.by.fem.clutch.all)
# fill in NAs for females with zero EP mates
mates.by.fem.clutch.all$num.ep.mates[which(
is.na(mate.by.fem.cltuch.all$num.ep.mates))]
# fill in NAs for females with zero EP mates
mates.by.fem.clutch.all$num.ep.mates[which(
is.na(mates.by.fem.cltuch.all$num.ep.mates))]
# fill in NAs for females with zero EP mates
mates.by.fem.clutch.all$num.ep.mates[which(
is.na(mates.by.fem.clutch.all$num.ep.mates))]
# fill in NAs for females with zero EP mates
mates.by.fem.clutch.all$num.ep.mates[which(
is.na(mates.by.fem.clutch.all$num.ep.mates))] <- 0
mates.by.fem.clutch.all$num.ep.chicks[which(
is.na(mates.by.fem.clutch.all$num.ep.chicks))] <- 0
View(mates.by.fem.clutch.all)
# remove the NA rows for the unsampled females
mates.by.fem.clutch.all2 <- subset(mates.by.fem.clutch.all,
!is.na(mates.by.fem.all$Band_mom))
!is.na(mates.by.fem.all$Band_mom)
# remove the NA rows for the unsampled females
mates.by.fem.clutch.all2 <- mates.by.fem.clutch.all[-c(91,02), ]
View(mates.by.fem.clutch.all2)
# remove the NA rows for the unsampled females
mates.by.fem.clutch.all2 <- mates.by.fem.clutch.all[-c(91,92), ]
View(mates.by.fem.clutch.all2)
# save table
write.csv(mates.by.fem.clutch.all2, row.names = F,
"femael number of mates by clutch 2022.csv")
# save table
write.csv(mates.by.fem.clutch.all2, row.names = F,
"generated-files/female number of mates by clutch 2022.csv")
